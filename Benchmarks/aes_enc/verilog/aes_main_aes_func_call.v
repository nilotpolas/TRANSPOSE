// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_main_aes_func_call (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt1,
        statemt1_ap_vld,
        statemt1_read
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] statemt1;
output   statemt1_ap_vld;
input  [31:0] statemt1_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg statemt1_ap_vld;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_5_reg_233;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln37_fu_194_p2;
reg   [4:0] statemt_address0;
reg    statemt_ce0;
reg    statemt_we0;
reg   [31:0] statemt_d0;
wire   [31:0] statemt_q0;
reg   [4:0] statemt_address1;
reg    statemt_ce1;
reg    statemt_we1;
reg   [31:0] statemt_d1;
wire   [31:0] statemt_q1;
wire    grp_AddRoundKey_fu_101_ap_start;
wire    grp_AddRoundKey_fu_101_ap_done;
wire    grp_AddRoundKey_fu_101_ap_idle;
wire    grp_AddRoundKey_fu_101_ap_ready;
wire   [4:0] grp_AddRoundKey_fu_101_statemt_address0;
wire    grp_AddRoundKey_fu_101_statemt_ce0;
wire    grp_AddRoundKey_fu_101_statemt_we0;
wire   [31:0] grp_AddRoundKey_fu_101_statemt_d0;
wire   [4:0] grp_AddRoundKey_fu_101_statemt_address1;
wire    grp_AddRoundKey_fu_101_statemt_ce1;
wire    grp_AddRoundKey_fu_101_statemt_we1;
wire   [31:0] grp_AddRoundKey_fu_101_statemt_d1;
reg   [3:0] grp_AddRoundKey_fu_101_n;
wire    grp_ByteSub_ShiftRow_fu_111_ap_start;
wire    grp_ByteSub_ShiftRow_fu_111_ap_done;
wire    grp_ByteSub_ShiftRow_fu_111_ap_idle;
wire    grp_ByteSub_ShiftRow_fu_111_ap_ready;
wire   [4:0] grp_ByteSub_ShiftRow_fu_111_statemt_address0;
wire    grp_ByteSub_ShiftRow_fu_111_statemt_ce0;
wire    grp_ByteSub_ShiftRow_fu_111_statemt_we0;
wire   [31:0] grp_ByteSub_ShiftRow_fu_111_statemt_d0;
wire   [4:0] grp_ByteSub_ShiftRow_fu_111_statemt_address1;
wire    grp_ByteSub_ShiftRow_fu_111_statemt_ce1;
wire    grp_ByteSub_ShiftRow_fu_111_statemt_we1;
wire   [31:0] grp_ByteSub_ShiftRow_fu_111_statemt_d1;
wire    grp_MixColumn_AddRoundKey_fu_118_ap_start;
wire    grp_MixColumn_AddRoundKey_fu_118_ap_done;
wire    grp_MixColumn_AddRoundKey_fu_118_ap_idle;
wire    grp_MixColumn_AddRoundKey_fu_118_ap_ready;
wire   [4:0] grp_MixColumn_AddRoundKey_fu_118_statemt_address0;
wire    grp_MixColumn_AddRoundKey_fu_118_statemt_ce0;
wire    grp_MixColumn_AddRoundKey_fu_118_statemt_we0;
wire   [31:0] grp_MixColumn_AddRoundKey_fu_118_statemt_d0;
wire   [4:0] grp_MixColumn_AddRoundKey_fu_118_statemt_address1;
wire    grp_MixColumn_AddRoundKey_fu_118_statemt_ce1;
wire    grp_MixColumn_AddRoundKey_fu_118_statemt_we1;
wire   [31:0] grp_MixColumn_AddRoundKey_fu_118_statemt_d1;
reg    grp_AddRoundKey_fu_101_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_139_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
reg    grp_ByteSub_ShiftRow_fu_111_ap_start_reg;
wire   [0:0] icmp_ln26_fu_164_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
reg    grp_MixColumn_AddRoundKey_fu_118_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln13_fu_134_p1;
wire   [63:0] zext_ln37_fu_189_p1;
reg   [5:0] i_fu_52;
wire   [5:0] add_ln13_fu_145_p2;
reg   [3:0] i_1_fu_60;
wire   [3:0] i_6_fu_170_p2;
reg   [5:0] i_3_fu_64;
wire   [5:0] add_ln37_fu_200_p2;
wire    ap_CS_fsm_state12;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_AddRoundKey_fu_101_ap_start_reg = 1'b0;
#0 grp_ByteSub_ShiftRow_fu_111_ap_start_reg = 1'b0;
#0 grp_MixColumn_AddRoundKey_fu_118_ap_start_reg = 1'b0;
end

aes_main_MixColumn_AddRoundKey_ret_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
statemt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(statemt_address0),
    .ce0(statemt_ce0),
    .we0(statemt_we0),
    .d0(statemt_d0),
    .q0(statemt_q0),
    .address1(statemt_address1),
    .ce1(statemt_ce1),
    .we1(statemt_we1),
    .d1(statemt_d1),
    .q1(statemt_q1)
);

aes_main_AddRoundKey grp_AddRoundKey_fu_101(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_101_ap_start),
    .ap_done(grp_AddRoundKey_fu_101_ap_done),
    .ap_idle(grp_AddRoundKey_fu_101_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_101_ap_ready),
    .statemt_address0(grp_AddRoundKey_fu_101_statemt_address0),
    .statemt_ce0(grp_AddRoundKey_fu_101_statemt_ce0),
    .statemt_we0(grp_AddRoundKey_fu_101_statemt_we0),
    .statemt_d0(grp_AddRoundKey_fu_101_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_AddRoundKey_fu_101_statemt_address1),
    .statemt_ce1(grp_AddRoundKey_fu_101_statemt_ce1),
    .statemt_we1(grp_AddRoundKey_fu_101_statemt_we1),
    .statemt_d1(grp_AddRoundKey_fu_101_statemt_d1),
    .statemt_q1(statemt_q1),
    .n(grp_AddRoundKey_fu_101_n)
);

aes_main_ByteSub_ShiftRow grp_ByteSub_ShiftRow_fu_111(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ByteSub_ShiftRow_fu_111_ap_start),
    .ap_done(grp_ByteSub_ShiftRow_fu_111_ap_done),
    .ap_idle(grp_ByteSub_ShiftRow_fu_111_ap_idle),
    .ap_ready(grp_ByteSub_ShiftRow_fu_111_ap_ready),
    .statemt_address0(grp_ByteSub_ShiftRow_fu_111_statemt_address0),
    .statemt_ce0(grp_ByteSub_ShiftRow_fu_111_statemt_ce0),
    .statemt_we0(grp_ByteSub_ShiftRow_fu_111_statemt_we0),
    .statemt_d0(grp_ByteSub_ShiftRow_fu_111_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_ByteSub_ShiftRow_fu_111_statemt_address1),
    .statemt_ce1(grp_ByteSub_ShiftRow_fu_111_statemt_ce1),
    .statemt_we1(grp_ByteSub_ShiftRow_fu_111_statemt_we1),
    .statemt_d1(grp_ByteSub_ShiftRow_fu_111_statemt_d1),
    .statemt_q1(statemt_q1)
);

aes_main_MixColumn_AddRoundKey grp_MixColumn_AddRoundKey_fu_118(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MixColumn_AddRoundKey_fu_118_ap_start),
    .ap_done(grp_MixColumn_AddRoundKey_fu_118_ap_done),
    .ap_idle(grp_MixColumn_AddRoundKey_fu_118_ap_idle),
    .ap_ready(grp_MixColumn_AddRoundKey_fu_118_ap_ready),
    .statemt_address0(grp_MixColumn_AddRoundKey_fu_118_statemt_address0),
    .statemt_ce0(grp_MixColumn_AddRoundKey_fu_118_statemt_ce0),
    .statemt_we0(grp_MixColumn_AddRoundKey_fu_118_statemt_we0),
    .statemt_d0(grp_MixColumn_AddRoundKey_fu_118_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_MixColumn_AddRoundKey_fu_118_statemt_address1),
    .statemt_ce1(grp_MixColumn_AddRoundKey_fu_118_statemt_ce1),
    .statemt_we1(grp_MixColumn_AddRoundKey_fu_118_statemt_we1),
    .statemt_d1(grp_MixColumn_AddRoundKey_fu_118_statemt_d1),
    .statemt_q1(statemt_q1),
    .n(i_5_reg_233)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_fu_101_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_139_p2 == 1'd1)))) begin
            grp_AddRoundKey_fu_101_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_101_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_101_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ByteSub_ShiftRow_fu_111_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln26_fu_164_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln26_fu_164_p2 == 1'd0)))) begin
            grp_ByteSub_ShiftRow_fu_111_ap_start_reg <= 1'b1;
        end else if ((grp_ByteSub_ShiftRow_fu_111_ap_ready == 1'b1)) begin
            grp_ByteSub_ShiftRow_fu_111_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MixColumn_AddRoundKey_fu_118_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_MixColumn_AddRoundKey_fu_118_ap_start_reg <= 1'b1;
        end else if ((grp_MixColumn_AddRoundKey_fu_118_ap_ready == 1'b1)) begin
            grp_MixColumn_AddRoundKey_fu_118_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_139_p2 == 1'd1))) begin
        i_1_fu_60 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln26_fu_164_p2 == 1'd0))) begin
        i_1_fu_60 <= i_6_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln26_fu_164_p2 == 1'd1))) begin
        i_3_fu_64 <= 6'd0;
    end else if (((icmp_ln37_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        i_3_fu_64 <= add_ln37_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_52 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_139_p2 == 1'd0))) begin
        i_fu_52 <= add_ln13_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_5_reg_233 <= i_1_fu_60;
    end
end

always @ (*) begin
    if ((grp_AddRoundKey_fu_101_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_AddRoundKey_fu_101_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteSub_ShiftRow_fu_111_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_MixColumn_AddRoundKey_fu_118_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ByteSub_ShiftRow_fu_111_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln37_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_AddRoundKey_fu_101_n = 4'd10;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_AddRoundKey_fu_101_n = 4'd0;
    end else begin
        grp_AddRoundKey_fu_101_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt1_ap_vld = 1'b1;
    end else begin
        statemt1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address0 = zext_ln37_fu_189_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_139_p2 == 1'd0))) begin
        statemt_address0 = zext_ln13_fu_134_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address0 = grp_MixColumn_AddRoundKey_fu_118_statemt_address0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_address0 = grp_ByteSub_ShiftRow_fu_111_statemt_address0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        statemt_address0 = grp_AddRoundKey_fu_101_statemt_address0;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address1 = grp_MixColumn_AddRoundKey_fu_118_statemt_address1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_address1 = grp_ByteSub_ShiftRow_fu_111_statemt_address1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        statemt_address1 = grp_AddRoundKey_fu_101_statemt_address1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_139_p2 == 1'd0)))) begin
        statemt_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_ce0 = grp_MixColumn_AddRoundKey_fu_118_statemt_ce0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_ce0 = grp_ByteSub_ShiftRow_fu_111_statemt_ce0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        statemt_ce0 = grp_AddRoundKey_fu_101_statemt_ce0;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_ce1 = grp_MixColumn_AddRoundKey_fu_118_statemt_ce1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_ce1 = grp_ByteSub_ShiftRow_fu_111_statemt_ce1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        statemt_ce1 = grp_AddRoundKey_fu_101_statemt_ce1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_139_p2 == 1'd0))) begin
        statemt_d0 = statemt1_read;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_d0 = grp_MixColumn_AddRoundKey_fu_118_statemt_d0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_d0 = grp_ByteSub_ShiftRow_fu_111_statemt_d0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        statemt_d0 = grp_AddRoundKey_fu_101_statemt_d0;
    end else begin
        statemt_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_d1 = grp_MixColumn_AddRoundKey_fu_118_statemt_d1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_d1 = grp_ByteSub_ShiftRow_fu_111_statemt_d1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        statemt_d1 = grp_AddRoundKey_fu_101_statemt_d1;
    end else begin
        statemt_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_139_p2 == 1'd0))) begin
        statemt_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_we0 = grp_MixColumn_AddRoundKey_fu_118_statemt_we0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_we0 = grp_ByteSub_ShiftRow_fu_111_statemt_we0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        statemt_we0 = grp_AddRoundKey_fu_101_statemt_we0;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_we1 = grp_MixColumn_AddRoundKey_fu_118_statemt_we1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_we1 = grp_ByteSub_ShiftRow_fu_111_statemt_we1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        statemt_we1 = grp_AddRoundKey_fu_101_statemt_we1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_139_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_AddRoundKey_fu_101_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln26_fu_164_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_ByteSub_ShiftRow_fu_111_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_MixColumn_AddRoundKey_fu_118_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((grp_ByteSub_ShiftRow_fu_111_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_AddRoundKey_fu_101_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln37_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_145_p2 = (i_fu_52 + 6'd1);

assign add_ln37_fu_200_p2 = (i_3_fu_64 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AddRoundKey_fu_101_ap_start = grp_AddRoundKey_fu_101_ap_start_reg;

assign grp_ByteSub_ShiftRow_fu_111_ap_start = grp_ByteSub_ShiftRow_fu_111_ap_start_reg;

assign grp_MixColumn_AddRoundKey_fu_118_ap_start = grp_MixColumn_AddRoundKey_fu_118_ap_start_reg;

assign i_6_fu_170_p2 = (i_1_fu_60 + 4'd1);

assign icmp_ln13_fu_139_p2 = ((i_fu_52 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_164_p2 = ((i_1_fu_60 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_194_p2 = ((i_3_fu_64 == 6'd32) ? 1'b1 : 1'b0);

assign statemt1 = statemt_q0;

assign zext_ln13_fu_134_p1 = i_fu_52;

assign zext_ln37_fu_189_p1 = i_3_fu_64;

endmodule //aes_main_aes_func_call
